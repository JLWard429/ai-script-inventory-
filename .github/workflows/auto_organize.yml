name: 🗂️ Superhuman Auto Organization
on:
  push:
    # Only run when script directories or the organization script change
    paths:
      - 'python_scripts/**'
      - 'shell_scripts/**'
      - 'docs/**'
      - 'text_files/**'
      - '.github/scripts/**'
      - '*.py'
      - '*.sh'
      - '*.md'
      - '*.txt'
  workflow_dispatch:
  schedule:
    # Run weekly cleanup on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

env:
  PYTHON_VERSION: '3.11'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-structure:
    name: 🔍 Validate Repository Structure
    runs-on: ubuntu-latest
    outputs:
      needs_organization: ${{ steps.check.outputs.needs_organization }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🔍 Check if organization is needed
        id: check
        run: |
          # Check for files in root that should be organized
          MISPLACED_FILES=0
          
          # Check for Python files in root
          if ls *.py 2>/dev/null | grep -v __pycache__ | grep -v setup.py; then
            MISPLACED_FILES=$((MISPLACED_FILES + 1))
            echo "Found Python files in root"
          fi
          
          # Check for shell scripts in root
          if ls *.sh 2>/dev/null; then
            MISPLACED_FILES=$((MISPLACED_FILES + 1))
            echo "Found shell scripts in root"
          fi
          
          # Check for documentation files in root (except README.md and LICENSE)
          if ls *.md 2>/dev/null | grep -v README.md; then
            MISPLACED_FILES=$((MISPLACED_FILES + 1))
            echo "Found documentation files in root"
          fi
          
          if [ $MISPLACED_FILES -gt 0 ]; then
            echo "needs_organization=true" >> $GITHUB_OUTPUT
          else
            echo "needs_organization=false" >> $GITHUB_OUTPUT
          fi

  organize-ai-scripts:
    name: 🗂️ Organize and Audit AI Scripts
    runs-on: ubuntu-latest
    needs: validate-structure
    if: needs.validate-structure.outputs.needs_organization == 'true' || github.event_name == 'workflow_dispatch'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'


      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f .github/scripts/requirements.txt ]; then
            pip install -r .github/scripts/requirements.txt
          fi

      - name: Validate organization script
        run: |
          echo "Validating organization script..."
          python -m py_compile .github/scripts/organize_ai_scripts.py
          echo "✓ Script syntax is valid"

      - name: 🔍 Pre-organization audit
        run: |
          echo "## 📊 Pre-Organization Repository State" > organization-report.md
          echo "" >> organization-report.md
          echo "### File Distribution:" >> organization-report.md
          echo "- Root directory files: $(ls -1 | grep -v '^\.git' | wc -l)" >> organization-report.md
          echo "- Python scripts: $(find . -name '*.py' | wc -l)" >> organization-report.md
          echo "- Shell scripts: $(find . -name '*.sh' | wc -l)" >> organization-report.md
          echo "- Documentation files: $(find . -name '*.md' | wc -l)" >> organization-report.md
          echo "- Text files: $(find . -name '*.txt' | wc -l)" >> organization-report.md
          echo "" >> organization-report.md

      - name: 🗂️ Run enhanced organization script
        id: organize
        run: |
          echo "Running enhanced organize_ai_scripts.py..."
          python .github/scripts/organize_ai_scripts.py | tee organize_output.log
          
          # Check if any files were moved
          if grep -q "Moved" organize_output.log; then
            echo "files_moved=true" >> $GITHUB_OUTPUT
          else
            echo "files_moved=false" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Post-organization audit
        run: |
          echo "" >> organization-report.md
          echo "## 📊 Post-Organization Repository State" >> organization-report.md
          echo "" >> organization-report.md
          echo "### Updated File Distribution:" >> organization-report.md
          echo "- Root directory files: $(ls -1 | grep -v '^\.git' | wc -l)" >> organization-report.md
          echo "- Python scripts directory: $(find python_scripts -name '*.py' 2>/dev/null | wc -l) files" >> organization-report.md
          echo "- Shell scripts directory: $(find shell_scripts -name '*.sh' 2>/dev/null | wc -l) files" >> organization-report.md
          echo "- Documentation directory: $(find docs -name '*.md' 2>/dev/null | wc -l) files" >> organization-report.md
          echo "- Text files directory: $(find text_files -name '*.txt' 2>/dev/null | wc -l) files" >> organization-report.md
          echo "" >> organization-report.md
          
          echo "### Organization Log:" >> organization-report.md
          echo '```' >> organization-report.md
          cat organize_output.log >> organization-report.md
          echo '```' >> organization-report.md
          
          echo "====== organize_ai_scripts.py Output ======"
          cat organize_output.log || echo "No output log found."
          echo "==========================================="

      - name: Validate organized files
        run: |
          echo "=== Post-organization validation ==="
          echo "Checking Python scripts..."
          for script in $(find python_scripts/ -name "*.py" 2>/dev/null); do
            python -m py_compile "$script" && echo "✓ $script" || echo "✗ $script"
          done
          
          echo "Checking directory structure..."
          ls -la python_scripts/ shell_scripts/ docs/ text_files/ 2>/dev/null || true

      - name: Check for changes
        id: changes
        run: |
          git diff --quiet --exit-code || echo "changes=true" >> $GITHUB_OUTPUT

      - name: 🔄 Commit & push changes
        if: steps.organize.outputs.files_moved == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "🤖 Automated: Organize and audit AI scripts [skip ci]

          This commit was automatically generated by the organization workflow.
          
          - Files organized by type into appropriate directories
          - README templates created where missing
          - Organization log available in workflow output
          
          Report: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            git push
          else
            echo "No changes to commit."
          fi

      - name: 🔍 Validate organization results
        run: |
          echo "Validating organization results..."
          
          # Check for required directories
          for dir in python_scripts shell_scripts docs text_files; do
            if [ ! -d "$dir" ]; then
              echo "❌ Missing required directory: $dir"
              exit 1
            fi
            
            # Check for README in each directory
            if [ ! -f "$dir/README.md" ]; then
              echo "⚠️ Missing README.md in $dir"
            fi
          done
          
          echo "✅ Organization validation completed"

      - name: 📤 Upload organization report
        uses: actions/upload-artifact@v4
        with:
          name: organization-report-${{ github.run_number }}
          path: organization-report.md
          retention-days: 30

      - name: Upload organization logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: organization-logs
          path: |
            organize_output.log
            organize_ai_scripts.log
          retention-days: 7

      - name: 📊 Workflow summary
        if: always()
        run: |
          echo "## 🗂️ Organization Workflow Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Moved**: ${{ steps.organize.outputs.files_moved }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation**: Completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- **Report Generated**: ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f organization-report.md ]; then
            echo "### Organization Report:" >> $GITHUB_STEP_SUMMARY
            cat organization-report.md >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Completed**: $(date)" >> $GITHUB_STEP_SUMMARY

          echo "## 🤖 Organization Workflow Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.changes.outputs.changes }}" == "true" ]; then
            echo "✅ Changes detected and committed automatically" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No changes needed - repository already organized" >> $GITHUB_STEP_SUMMARY
          fi

  cleanup-duplicate-docs:
    name: 🧹 Cleanup Duplicate Documentation
    runs-on: ubuntu-latest
    needs: organize-ai-scripts
    if: always() && (needs.organize-ai-scripts.result == 'success' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 🧹 Remove duplicate documentation
        run: |
          echo "Checking for duplicate documentation..."
          
          # Remove duplicate Copilot CLI command files
          if [ -f "docs/Copilot-CLI-Commands.md" ] && [ -f "docs/Copilot-CLI-Commands_Version7.md" ]; then
            # Keep the newer version (Version7) and remove the older one
            if cmp -s "docs/Copilot-CLI-Commands.md" "docs/Copilot-CLI-Commands_Version7.md"; then
              echo "Files are identical, removing older version"
              rm "docs/Copilot-CLI-Commands.md"
            else
              echo "Files differ, keeping both for now"
            fi
          fi
          
          # Remove duplicate README files in docs
          if [ -f "docs/README_20250824183103.md" ]; then
            echo "Removing timestamped README duplicate"
            rm "docs/README_20250824183103.md"
          fi

      - name: 🔄 Commit cleanup changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "🧹 Automated: Cleanup duplicate documentation [skip ci]"
            git push
          else
            echo "No cleanup needed."
          fi
