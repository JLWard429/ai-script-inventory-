name: 🚀 Superhuman CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
  schedule:
    # Run weekly quality checks
    - cron: '0 2 * * 1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  security-events: write
  pull-requests: read

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ==================== CHANGE DETECTION ====================
  changes:
    name: 📋 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.changes.outputs.python }}
      workflows: ${{ steps.changes.outputs.workflows }}
      docs: ${{ steps.changes.outputs.docs }}
      scripts: ${{ steps.changes.outputs.scripts }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            python:
              - '**/*.py'
              - 'requirements*.txt'
              - 'pyproject.toml'
            workflows:
              - '.github/workflows/**'
              - '.github/scripts/**'
            docs:
              - '**.md'
              - 'docs/**'
            scripts:
              - 'python_scripts/**'
              - 'shell_scripts/**'

  # ==================== QUALITY CHECKS ====================
  quality-checks:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true' || needs.changes.outputs.scripts == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements-dev.txt
          # Install spaCy language model for AI terminal functionality
          python -m spacy download en_core_web_sm

      - name: 🎨 Check code formatting (Black)
        run: black --check --diff .

      - name: 📐 Check import sorting (isort)
        run: isort --check-only --diff .

      - name: 🔧 Lint with flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: 🔍 Advanced linting (pylint)
        run: |
          find . -name "*.py" -not -path "./.github/*" | xargs pylint --disable=C0114,C0115,C0116 --exit-zero

      - name: 🛡️ Security check (bandit)
        run: bandit -r . -f json -o bandit-report.json --exit-zero

      - name: 📊 Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

  # ==================== SHELL SCRIPT VALIDATION ====================
  shell-validation:
    name: 🐚 Shell Script Validation
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.scripts == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Install ShellCheck
        run: sudo apt-get install -y shellcheck

      - name: ✅ Validate shell scripts
        run: |
          find . -name "*.sh" -not -path "./.git/*" | while read -r script; do
            echo "Checking $script..."
            shellcheck "$script" || echo "Issues found in $script"
          done

  # ==================== TESTING ====================
  test-matrix:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true' || needs.changes.outputs.scripts == 'true'
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements-dev.txt
          # Install spaCy language model for AI terminal functionality
          python -m spacy download en_core_web_sm

      - name: 🧪 Run tests
        run: |
          echo "🧪 Running tests with coverage enforcement..."
          pytest tests/ -v \
                 --cov=python_scripts --cov=.github/scripts --cov=src/ai_script_inventory \
                 --cov-report=xml --cov-report=html --cov-report=term \
                 --cov-fail-under=75

      - name: 🔍 Type checking (mypy)
        run: |
          echo "🔍 Running strict type checking..."
          mypy python_scripts/ .github/scripts/ src/ --strict --no-error-summary

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # ==================== SECURITY SCANNING ====================
  security-scan:
    name: 🛡️ Security Analysis
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: 🔍 Run Bandit security check
        run: |
          bandit -r python_scripts/ .github/scripts/ -f json -o bandit-report.json
        continue-on-error: true

      - name: 🔍 Run Safety dependency check
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # ==================== SCRIPT INTEGRATION TEST ====================
  script-integration-test:
    name: 🔧 Script Integration Test
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true' || needs.changes.outputs.scripts == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements-dev.txt
          # Install spaCy language model for AI terminal functionality
          python -m spacy download en_core_web_sm

      - name: 🧪 Test organization script in dry-run mode
        run: |
          cd /tmp
          cp -r $GITHUB_WORKSPACE test_repo
          cd test_repo
          
          # Create test files
          echo "print('test')" > test_python.py
          echo "#!/bin/bash\necho 'test'" > test_shell.sh
          echo "# Test docs" > test_doc.md
          echo "test content" > test_file.txt
          
          # Run organization script in dry-run mode if it exists
          if [ -f ".github/scripts/organize_ai_scripts.py" ]; then
            sed -i 's/DRY_RUN = False/DRY_RUN = True/' .github/scripts/organize_ai_scripts.py
            python .github/scripts/organize_ai_scripts.py
          fi
          
          echo "Integration test completed successfully"

  # ==================== DOCUMENTATION CHECK ====================
  docs-check:
    name: 📚 Documentation Validation
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docs == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Check README structure
        run: |
          echo "Validating documentation structure..."
          if [ ! -f "README.md" ]; then
            echo "❌ README.md is missing"
            exit 1
          fi
          
          # Check for required sections
          if ! grep -q "# " README.md; then
            echo "⚠️ README.md should have proper headers"
          fi
          
          echo "✅ Documentation structure validated"

      - name: 📝 Check for broken links
        run: |
          echo "Checking for broken internal links..."
          # Simple check for relative links
          find . -name "*.md" -exec grep -l "\[.*\](" {} \; || echo "No markdown links found"

  # ==================== RELEASE ====================
  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: [quality-checks, test-matrix, security-scan, script-integration-test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Generate changelog
        id: changelog
        run: |
          echo "## Changes in ${{ github.ref_name }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md

      - name: 🎉 Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

  # ==================== WORKFLOW SUMMARY ====================
  workflow-summary:
    name: 📋 Workflow Summary
    runs-on: ubuntu-latest
    needs: [changes, quality-checks, shell-validation, test-matrix, security-scan, script-integration-test, docs-check]
    if: always()
    steps:
      - name: 📊 Generate build summary
        run: |
          echo "## 🚀 Superhuman CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Status:" >> $GITHUB_STEP_SUMMARY
          echo "- Changes Detection: ${{ needs.changes.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Quality Checks: ${{ needs.quality-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Shell Validation: ${{ needs.shell-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test Matrix: ${{ needs.test-matrix.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Test: ${{ needs.script-integration-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation: ${{ needs.docs-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changes Detected:" >> $GITHUB_STEP_SUMMARY
          echo "- Python: ${{ needs.changes.outputs.python }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workflows: ${{ needs.changes.outputs.workflows }}" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation: ${{ needs.changes.outputs.docs }}" >> $GITHUB_STEP_SUMMARY
          echo "- Scripts: ${{ needs.changes.outputs.scripts }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✨ Pipeline completed at $(date)" >> $GITHUB_STEP_SUMMARY