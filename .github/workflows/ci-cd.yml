name: 🚀 Superhuman CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
  schedule:
    # Run weekly quality checks
    - cron: '0 2 * * 1'

permissions:
  contents: read
  security-events: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ==================== QUALITY CHECKS ====================
  quality-checks:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit pylint
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 🎨 Check code formatting (Black)
        run: black --check --diff .

      - name: 📐 Check import sorting (isort)
        run: isort --check-only --diff .

      - name: 🔧 Lint with flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: 🔍 Advanced linting (pylint)
        run: |
          find . -name "*.py" -not -path "./.github/*" | xargs pylint --disable=C0114,C0115,C0116 --exit-zero

      - name: 🛡️ Security check (bandit)
        run: bandit -r . -f json -o bandit-report.json --exit-zero

      - name: 📊 Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

  # ==================== SHELL SCRIPT VALIDATION ====================
  shell-validation:
    name: 🐚 Shell Script Validation
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 🔍 Install ShellCheck
        run: sudo apt-get install -y shellcheck

      - name: ✅ Validate shell scripts
        run: |
          find . -name "*.sh" -not -path "./.git/*" | while read -r script; do
            echo "Checking $script..."
            shellcheck "$script" || echo "Issues found in $script"
          done

  # ==================== MULTI-PLATFORM TESTING ====================
  test-matrix:
    name: 🧪 Test Suite
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for efficiency
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash

      - name: 🧪 Run tests
        run: |
          if [ -f "python_scripts/test_script.py" ]; then
            python python_scripts/test_script.py
          fi
          # Run organization script as test
          python .github/scripts/organize_ai_scripts.py
        shell: bash

      - name: 📊 Generate test report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: |
          echo "# Test Report" > test-report.md
          echo "- OS: ${{ matrix.os }}" >> test-report.md
          echo "- Python: ${{ matrix.python-version }}" >> test-report.md
          echo "- Status: ✅ Passed" >> test-report.md

  # ==================== PERFORMANCE TESTING ====================
  performance:
    name: ⚡ Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [quality-checks]
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⏱️ Performance test - Organization script
        run: |
          echo "Testing organization script performance..."
          time python .github/scripts/organize_ai_scripts.py
          
      - name: 📈 Memory usage check
        run: |
          pip install memory-profiler
          echo "Checking memory usage..."
          python -c "
          import psutil
          import os
          process = psutil.Process(os.getpid())
          print(f'Memory usage: {process.memory_info().rss / 1024 / 1024:.2f} MB')
          "

  # ==================== SECURITY SCANNING ====================
  security-scan:
    name: 🛡️ Security Analysis
    runs-on: ubuntu-latest
  
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ==================== DOCUMENTATION CHECK ====================
  docs-check:
    name: 📚 Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v5

      - name: 🔍 Check README structure
        run: |
          echo "Validating documentation structure..."
          if [ ! -f "README.md" ]; then
            echo "❌ README.md is missing"
            exit 1
          fi
          
          # Check for required sections
          if ! grep -q "# " README.md; then
            echo "⚠️ README.md should have proper headers"
          fi
          
          echo "✅ Documentation structure validated"

      - name: 📝 Check for broken links
        run: |
          echo "Checking for broken internal links..."
          # Simple check for relative links
          find . -name "*.md" -exec grep -l "\[.*\](" {} \; || echo "No markdown links found"

  # ==================== BUILD STATUS ====================
  build-status:
    name: 📋 Build Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, shell-validation, test-matrix, performance, security-scan, docs-check]
    if: always()
    steps:
      - name: 📊 Generate build summary
        run: |
          echo "## 🚀 Superhuman CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Status:" >> $GITHUB_STEP_SUMMARY
          echo "- Quality Checks: ${{ needs.quality-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Shell Validation: ${{ needs.shell-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test Matrix: ${{ needs.test-matrix.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance: ${{ needs.performance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation: ${{ needs.docs-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✨ Pipeline completed at $(date)" >> $GITHUB_STEP_SUMMARY
