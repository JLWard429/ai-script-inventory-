[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-script-inventory"
version = "1.0.0"
description = "A collection of AI-related scripts with superhuman workflow automation"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "JLWard429", email = "JLWard429@users.noreply.github.com"}
]
keywords = ["ai", "scripts", "automation", "workflow"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    # Core runtime dependencies - only what's actually used
    "spacy>=3.8.0,<4.0.0",      # NLP processing for intent recognition
    "pyyaml>=6.0.0,<7.0.0",     # YAML parsing for configuration files
]

[project.optional-dependencies]
# AI and machine learning features
ai = [
    "openai>=1.0.0",             # Official OpenAI API client for AI orchestration
]

dev = [
    # Code formatting and linting
    "black>=24.0.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    
    # Testing
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    
    # Security and quality tools
    "bandit>=1.8.0",
    "safety>=3.0.0",
    "pre-commit>=4.0.0",
]

[project.scripts]
ai-terminal = "ai_script_inventory.terminal:main"
superman = "superman:main"

[project.urls]
Homepage = "https://github.com/JLWard429/ai-script-inventory-"
Repository = "https://github.com/JLWard429/ai-script-inventory-.git"
Issues = "https://github.com/JLWard429/ai-script-inventory-/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ai_script_inventory"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
per-file-ignores = [
    "__init__.py:F401",
]

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true

# Per-module options
[[tool.mypy.overrides]]
module = ["spacy.*", "yaml.*", "openai.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]

[tool.coverage.run]
source = ["src/ai_script_inventory", "python_scripts", ".github/scripts"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]
branch = true

[tool.coverage.report]
fail_under = 75
show_missing = true
skip_covered = false
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "except ImportError:",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]